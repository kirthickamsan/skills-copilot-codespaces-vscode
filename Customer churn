import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, confusion_matrix
from sklearn.pipeline import Pipeline
import matplotlib.pyplot as plt
import seaborn as sns

# --- 1. Data Loading and Exploration (Placeholder) --- #
# In a real scenario, you would load your data from a CSV, database, etc.
# Example: data = pd.read_csv('customer_churn_data.csv')

# For demonstration, let's create a synthetic dataset
np.random.seed(42)
n_samples = 1000
data = pd.DataFrame({
    'CustomerID': range(n_samples),
    'Age': np.random.randint(18, 70, n_samples),
    'Gender': np.random.choice(['Male', 'Female'], n_samples),
    'SeniorCitizen': np.random.choice([0, 1], n_samples),
    'Partner': np.random.choice(['Yes', 'No'], n_samples),
    'Dependents': np.random.choice(['Yes', 'No'], n_samples),
    'Tenure': np.random.randint(0, 73, n_samples),
    'PhoneService': np.random.choice(['Yes', 'No'], n_samples),
    'MultipleLines': np.random.choice(['No phone service', 'No', 'Yes'], n_samples),
    'InternetService': np.random.choice(['DSL', 'Fiber optic', 'No'], n_samples),
    'OnlineSecurity': np.random.choice(['No', 'Yes', 'No internet service'], n_samples),
    'OnlineBackup': np.random.choice(['Yes', 'No', 'No internet service'], n_samples),
    'DeviceProtection': np.random.choice(['No', 'Yes', 'No internet service'], n_samples),
    'TechSupport': np.random.choice(['No', 'Yes', 'No internet service'], n_samples),
    'StreamingTV': np.random.choice(['No', 'Yes', 'No internet service'], n_samples),
    'StreamingMovies': np.random.choice(['No', 'Yes', 'No internet service'], n_samples),
    'Contract': np.random.choice(['Month-to-month', 'One year', 'Two year'], n_samples),
    'PaperlessBilling': np.random.choice(['Yes', 'No'], n_samples),
    'PaymentMethod': np.random.choice(['Electronic check', 'Mailed check', 'Bank transfer (automatic)', 'Credit card (automatic)'], n_samples),
    'MonthlyCharges': np.random.uniform(18.0, 118.75, n_samples),
    'TotalCharges': np.random.uniform(18.0, 8000.0, n_samples),
    'Churn': np.random.choice([0, 1], n_samples, p=[0.7, 0.3]) # Assuming 30% churn rate
})

print(data.head())
print(data.info())
